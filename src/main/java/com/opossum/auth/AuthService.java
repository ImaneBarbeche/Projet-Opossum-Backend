package com.opossum.auth;

import com.opossum.auth.dto.AuthResponse;
import com.opossum.auth.dto.LoginRequest;
import com.opossum.auth.dto.RegisterRequest;
import com.opossum.common.exceptions.UnauthorizedException;
import com.opossum.token.RefreshTokenService;
import com.opossum.user.User;
import com.opossum.user.UserRepository;
import jakarta.transaction.Transactional;

import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import java.time.Instant;
import java.time.Duration;
import java.util.Optional;
import java.util.UUID;

/**
 * Service m√©tier responsable de la logique d'authentification.
 */
@Service
public class AuthService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    // private final AuthenticationManager authenticationManager;
    private final JwtUtil jwtUtil;
    private final RefreshTokenService refreshTokenService;
    private final EmailService emailService;

    /**
     * Constructeur sans Lombok
     */
    public AuthService(UserRepository userRepository,
            PasswordEncoder passwordEncoder,
            AuthenticationManager authenticationManager,
            JwtUtil jwtUtil,
            RefreshTokenService refreshTokenService,
            EmailService emailService) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
        // this.authenticationManager = authenticationManager;
        this.jwtUtil = jwtUtil;
        this.refreshTokenService = refreshTokenService;
        this.emailService = emailService;
    }

    /**
     * Authentifie un utilisateur avec email + mot de passe
     */
    public AuthResponse login(LoginRequest request) {
        Optional<User> optionalUser = userRepository.findByEmail(request.getEmail());

        if (optionalUser.isEmpty()) {
            throw new UnauthorizedException("Identifiants incorrects");
        }

        User user = optionalUser.get();

        if (!passwordEncoder.matches(request.getPassword(), user.getPasswordHash())) {
            throw new ResponseStatusException(HttpStatus.CONFLICT, "Identifiants incorrects");

        }

        if (!user.isEmailVerified()) {
            throw new UnauthorizedException("Veuillez v√©rifier votre adresse email avant de vous connecter.");
        }

        System.out.println("Connexion r√©ussie pour : " + user.getEmail());

        return buildAuthResponse(user);
    }

    /**
     * Enregistre un nouvel utilisateur
     */
    @Transactional
    public AuthResponse register(RegisterRequest request) {

        System.out.println(">> check email en BDD : " + request.getEmail());
        System.out.println(">> user trouv√© : " + userRepository.findByEmail(request.getEmail()));
        System.out.println(">> existsByEmail : " + userRepository.existsByEmail(request.getEmail()));

        if (userRepository.existsByEmail(request.getEmail())) {
            throw new ResponseStatusException(HttpStatus.CONFLICT, "Email d√©j√† utilis√©");

        }

        User user = new User();
        // ID is auto-generated by JPA (@GeneratedValue), do not set manually
        user.setEmail(request.getEmail());
        user.setPasswordHash(passwordEncoder.encode(request.getPassword()));
        user.setFirstName(request.getFirstName());
        user.setLastName(request.getLastName());
        user.setPhone(request.getPhone());
        user.setRole("USER");
        user.setActive(true);
        user.setEmailVerified(false);
        user.setCreatedAt(Instant.now());

        user.setEmailVerificationToken(UUID.randomUUID().toString());
        user.setIsEmailVerified(false); // Facultatif, mais explicite

        userRepository.save(user);
        emailService.sendVerificationEmail(user.getEmail(), user.getEmailVerificationToken());

        return buildAuthResponse(user);
    }

    /**
     * Construit la r√©ponse AuthResponse avec tokens + infos user
     */
    private AuthResponse buildAuthResponse(User user) {
        String accessToken = jwtUtil.generateToken(user);
        String refreshToken = refreshTokenService.createRefreshToken(user);

        return new AuthResponse(
                user.getId(),
                user.getEmail(),
                user.getFirstName(),
                user.getLastName(),
                user.getRole(),
                accessToken,
                refreshToken,
                1800, // expiresIn: 30 minutes
                Instant.now()
        );
    }

    public AuthResponse refreshToken(String refreshToken) {
        User user = refreshTokenService.verifyRefreshToken(refreshToken);
        return buildAuthResponse(user);
    }

    public void forgotPassword(String email) {
        // 1. Trouver l‚Äôutilisateur
        Optional<User> optionalUser = userRepository.findByEmail(email);

        if (optionalUser.isEmpty()) {
            // Pour ne pas divulguer si un compte existe ou pas : on ne dit rien
            return;
        }

        User user = optionalUser.get();

        // 2. G√©n√©rer le token de reset
        String resetToken = UUID.randomUUID().toString();
        Instant expiresAt = Instant.now().plus(Duration.ofMinutes(30)); // valide 30 min

        // 3. Mettre √† jour l‚Äôutilisateur
        user.setPasswordResetToken(resetToken);
        user.setPasswordResetExpiresAt(expiresAt);

        userRepository.save(user);

        // 4. Afficher un faux lien de r√©initialisation (√† remplacer par envoi email plus tard)
        System.out.println("[üîê MOT DE PASSE OUBLI√â]");
        System.out.println("‚Üí Lien de r√©initialisation : https://opossum.app/reset-password?token=" + resetToken);
        System.out.println("‚Üí Ce lien est valable jusqu‚Äô√† : " + expiresAt);
    }

    public void resetPassword(String token, String newPassword) {
        // 1. V√©rifier que le token correspond √† un utilisateur
        Optional<User> optionalUser = userRepository.findByPasswordResetToken(token);

        if (optionalUser.isEmpty()) {
            throw new IllegalArgumentException("Token invalide.");
        }

        User user = optionalUser.get();

        // 2. V√©rifier la date d‚Äôexpiration
        Instant now = Instant.now();
        Instant expiresAt = user.getPasswordResetExpiresAt();

        if (expiresAt == null || expiresAt.isBefore(now)) {
            throw new IllegalArgumentException("Le lien de r√©initialisation a expir√©.");
        }

        // 3. Hacher le nouveau mot de passe
        String hashedPassword = passwordEncoder.encode(newPassword);
        user.setPasswordHash(hashedPassword);

        // 4. Supprimer les infos de reset
        user.setPasswordResetToken(null);
        user.setPasswordResetExpiresAt(null);

        // 5. Sauvegarder
        userRepository.save(user);

        System.out.println("[‚úÖ MOT DE PASSE MIS √Ä JOUR POUR : " + user.getEmail() + "]");
    }

}
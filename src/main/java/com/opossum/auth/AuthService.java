package com.opossum.auth;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Optional;
import java.util.UUID;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import java.util.Map;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;
import com.opossum.auth.dto.AuthResponse;
import com.opossum.auth.dto.LoginRequest;
import com.opossum.auth.dto.RegisterRequest;
import com.opossum.common.exceptions.UnauthorizedException;
import com.opossum.token.RefreshTokenService;
import com.opossum.user.User;
import com.opossum.user.UserRepository;
import jakarta.transaction.Transactional;

/**
 * Service m√©tier responsable de la logique d'authentification.
 */
@Service
public class AuthService {
    
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    // private final AuthenticationManager authenticationManager;
    private final JwtUtil jwtUtil;
    private final RefreshTokenService refreshTokenService;
    private final EmailService emailService;

    /**
     * Constructeur sans Lombok
     */
    public AuthService(UserRepository userRepository,
            PasswordEncoder passwordEncoder,
            AuthenticationManager authenticationManager,
            JwtUtil jwtUtil,
            RefreshTokenService refreshTokenService,
            EmailService emailService) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
        // this.authenticationManager = authenticationManager;
        this.jwtUtil = jwtUtil;
        this.refreshTokenService = refreshTokenService;
        this.emailService = emailService;
    }

    /**
     * Authentifie un utilisateur avec email + mot de passe
     */
    public AuthResponse login(LoginRequest request) {
        Optional<User> optionalUser = userRepository.findByEmail(request.getEmail());

        if (optionalUser.isEmpty()) {
            throw new UnauthorizedException("Identifiants incorrects");
        }

        User user = optionalUser.get();

        if (!passwordEncoder.matches(request.getPassword(), user.getPasswordHash())) {
            throw new ResponseStatusException(HttpStatus.CONFLICT, "Identifiants incorrects");

        }

        if (!user.isEmailVerified()) {
            throw new UnauthorizedException("Veuillez v√©rifier votre adresse email avant de vous connecter.");
        }

        System.out.println("Connexion r√©ussie pour : " + user.getEmail());

        return buildAuthResponse(user);
    }
/**
     * Authentifie un utilisateur et retourne la r√©ponse enrichie pr√™te √† √™tre envoy√©e par le contr√¥leur
     */
    public ResponseEntity<Map<String, Object>> loginResponse(LoginRequest request) {
        AuthResponse response = login(request);
        Optional<User> userOpt = userRepository.findByEmail(request.getEmail());
        userOpt.ifPresent(user -> {
            user.setLastLoginAt(java.time.Instant.now());
            userRepository.save(user);
        });
        Map<String, Object> userMap = new java.util.HashMap<>();
        userMap.put("id", response.getId());
        userMap.put("email", response.getEmail());
        userMap.put("firstName", response.getFirstName());
        userMap.put("lastName", response.getLastName());
        userMap.put("avatar", userOpt.map(User::getAvatar).orElse(null));
        userMap.put("role", response.getRole());

        Map<String, Object> tokensMap = new java.util.HashMap<>();
        tokensMap.put("accessToken", response.getAccessToken());
        tokensMap.put("refreshToken", response.getRefreshToken());
        tokensMap.put("expiresIn", response.getExpiresIn());

        Map<String, Object> data = java.util.Map.of(
            "user", userMap,
            "tokens", tokensMap
        );

        return ResponseEntity.ok(
            java.util.Map.of(
                "success", true,
                "data", data,
                "message", "Connexion r√©ussie",
                "timestamp", java.time.Instant.now()
            )
        );
    }

    /**
     * Enregistre un nouvel utilisateur
     */
    @Transactional
    public AuthResponse register(RegisterRequest request) {

        System.out.println(">> check email en BDD : " + request.getEmail());
        System.out.println(">> user trouv√© : " + userRepository.findByEmail(request.getEmail()));
        System.out.println(">> existsByEmail : " + userRepository.existsByEmail(request.getEmail()));

        if (userRepository.existsByEmail(request.getEmail())) {
            throw new ResponseStatusException(HttpStatus.CONFLICT, "Email d√©j√† utilis√©");

        }

        User user = new User();
        // ID is auto-generated by JPA (@GeneratedValue), do not set manually
        user.setEmail(request.getEmail());
        user.setPasswordHash(passwordEncoder.encode(request.getPassword()));
        user.setFirstName(request.getFirstName());
        user.setLastName(request.getLastName());
        user.setPhone(request.getPhone());
        user.setAvatar(request.getAvatar());
        user.setRole(com.opossum.common.enums.Role.USER);
        user.setActive(true);
        user.setCreatedAt(Instant.now());

        user.setEmailVerificationToken(UUID.randomUUID().toString());
        user.setEmailVerified(false); // üü¢ Email non v√©rifi√© au moment de l'inscription
        user.setEmailVerificationExpiresAt(Instant.now().plus(24, ChronoUnit.HOURS));

        userRepository.save(user);
        emailService.sendVerificationEmail(user.getEmail(), user.getEmailVerificationToken());

        return buildAuthResponse(user);
    }

    /**
     * Construit la r√©ponse AuthResponse avec tokens + infos user
     */
    private AuthResponse buildAuthResponse(User user) {
        String accessToken = jwtUtil.generateToken(user);
        String refreshToken = refreshTokenService.createRefreshToken(user);

        return new AuthResponse(
                user.getId(),
                user.getEmail(),
                user.getFirstName(),
                user.getLastName(),
                user.getRole() != null ? user.getRole().name() : null,
                accessToken,
                refreshToken,
                1800, // expiresIn: 30 minutes
                Instant.now()
        );
    }

    public AuthResponse refreshToken(String refreshToken) {
        User user = refreshTokenService.verifyRefreshToken(refreshToken);
        return buildAuthResponse(user);
    }
}